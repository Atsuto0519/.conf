(function() {
  var Toc,
    hasProp = {}.hasOwnProperty;

  module.exports = Toc = (function() {
    function Toc(editor) {
      var at;
      this.editor = editor;
      this.lines = [];
      this.list = [];
      this.options = {
        depthFrom: 1,
        depthTo: 6,
        withLinks: 1,
        updateOnSave: 1,
        orderedList: 0
      };
      this.create();
      at = this;
      this.editor.getBuffer().onWillSave(function() {
        if (at.options.updateOnSave === 1) {
          if (at._hasToc()) {
            at._deleteToc();
            return at.editor.setTextInBufferRange([[at.open, 0], [at.open, 0]], at._createToc());
          }
        }
      });
    }

    Toc.prototype.create = function() {
      if (this._hasToc()) {
        this._deleteToc();
        this.editor.setTextInBufferRange([[this.open, 0], [this.open, 0]], this._createToc());
      }
      return this.editor.insertText(this._createToc());
    };

    Toc.prototype.update = function() {
      if (this._hasToc()) {
        this._deleteToc();
        return this.editor.setTextInBufferRange([[this.open, 0], [this.open, 0]], this._createToc());
      } else {
        return this.editor.insertText(this._createToc());
      }
    };

    Toc.prototype["delete"] = function() {
      if (this._hasToc()) {
        return this._deleteToc();
      }
    };

    Toc.prototype.autosave = function() {
      if (this._hasToc()) {
        this._deleteToc();
        return this.editor.setTextInBufferRange([[this.open, 0], [this.open, 0]], this._createToc());
      }
    };

    Toc.prototype._hasToc = function() {
      var i, line, options;
      this.___updateLines();
      if (this.lines.length > 0) {
        this.open = false;
        this.close = false;
        options = void 0;
        for (i in this.lines) {
          line = this.lines[i];
          if (this.open === false) {
            if (line.match(/^<!--(.*)TOC(.*)-->$/g)) {
              this.open = parseInt(i);
              options = line;
            }
          } else {
            if (line.match(/^<!--(.*)\/TOC(.*)-->$/g)) {
              this.close = parseInt(i);
              break;
            }
          }
        }
        if (this.open !== false && this.close !== false) {
          if (options !== void 0) {
            this.__updateOptions(options);
            return true;
          }
        }
      }
      return false;
    };

    Toc.prototype._createToc = function() {
      var list, text;
      this.__updateList();
      if (Object.keys(this.list).length > 0) {
        text = [];
        text.push("<!-- TOC depthFrom:" + this.options.depthFrom + " depthTo:" + this.options.depthTo + " withLinks:" + this.options.withLinks + " updateOnSave:" + this.options.updateOnSave + " orderedList:" + this.options.orderedList + " -->\n");
        list = this.__createList();
        if (list !== false) {
          Array.prototype.push.apply(text, list);
        }
        text.push("\n<!-- /TOC -->");
        return text.join("\n");
      }
      return "";
    };

    Toc.prototype._deleteToc = function() {
      return this.editor.setTextInBufferRange([[this.open, 0], [this.close, 14]], "");
    };

    Toc.prototype.__updateList = function() {
      var depthFrom, depthTo, i, line, result, results;
      this.___updateLines();
      this.list = [];
      results = [];
      for (i in this.lines) {
        line = this.lines[i];
        result = line.match(/^\#{1,6}/);
        if (result) {
          depthFrom = this.options.depthFrom !== void 0 ? this.options.depthFrom : 1;
          depthTo = this.options.depthTo !== void 0 ? this.options.depthTo : 6;
          if ((result[0].length <= parseInt(depthTo)) && (result[0].length >= parseInt(depthFrom))) {
            results.push(this.list.push({
              depth: result[0].length,
              line: new String(line)
            }));
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Toc.prototype.__createList = function() {
      var depthFrom, depthTo, i, indicesOfDepth, item, j, line, list, ref, ref1, ref2, row, tab;
      list = [];
      depthFrom = this.options.depthFrom !== void 0 ? this.options.depthFrom : 1;
      depthTo = this.options.depthTo !== void 0 ? this.options.depthTo : 6;
      indicesOfDepth = Array.apply(null, new Array(depthTo - depthFrom)).map(Number.prototype.valueOf, 0);
      ref = this.list;
      for (i in ref) {
        if (!hasProp.call(ref, i)) continue;
        item = ref[i];
        row = [];
        for (tab = j = ref1 = depthFrom, ref2 = item.depth; ref1 <= ref2 ? j <= ref2 : j >= ref2; tab = ref1 <= ref2 ? ++j : --j) {
          if (tab > depthFrom) {
            row.push("\t");
          }
        }
        if (this.options.orderedList === 1) {
          row.push(++indicesOfDepth[item.depth - 1] + ". ");
          indicesOfDepth = indicesOfDepth.map(function(value, index) {
            if (index < item.depth) {
              return value;
            } else {
              return 0;
            }
          });
        } else {
          row.push("- ");
        }
        line = item.line.substr(item.depth);
        line = line.trim();
        if (this.options.withLinks === 1) {
          row.push(this.___createLink(line));
        } else {
          row.push(line);
        }
        list.push(row.join(""));
      }
      if (list.length > 0) {
        return list;
      }
      return false;
    };

    Toc.prototype.__updateOptions = function(line) {
      var i, key, option, options, results, value;
      options = line.match(/(\w+(=|:)(\d|yes|no))+/g);
      if (options) {
        this.options = {};
        results = [];
        for (i in options) {
          option = options[i];
          key = option.match(/^(\w+)/g);
          key = new String(key[0]);
          value = option.match(/(\d|yes|no)$/g);
          value = new String(value[0]);
          if (value.length > 1) {
            if (value.toLowerCase().valueOf() === new String("yes").valueOf()) {
              value = 1;
            } else {
              value = 0;
            }
          }
          if (key.toLowerCase().valueOf() === new String("depthfrom").valueOf()) {
            results.push(this.options.depthFrom = parseInt(value));
          } else if (key.toLowerCase().valueOf() === new String("depthto").valueOf()) {
            results.push(this.options.depthTo = parseInt(value));
          } else if (key.toLowerCase().valueOf() === new String("withlinks").valueOf()) {
            results.push(this.options.withLinks = parseInt(value));
          } else if (key.toLowerCase().valueOf() === new String("updateonsave").valueOf()) {
            results.push(this.options.updateOnSave = parseInt(value));
          } else if (key.toLowerCase().valueOf() === new String("orderedlist").valueOf()) {
            results.push(this.options.orderedList = parseInt(value));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    Toc.prototype.___updateLines = function() {
      if (this.editor !== void 0) {
        return this.lines = this.editor.getBuffer().getLines();
      } else {
        return this.lines = [];
      }
    };

    Toc.prototype.___createLink = function(name) {
      var hash, link;
      hash = new String(name);
      hash = hash.toLowerCase().replace(/\s/g, "-");
      hash = hash.replace(/[^a-z0-9\u4e00-\u9fa5äüö\-]/g, "");
      if (hash.indexOf("--") > -1) {
        hash = hash.replace(/(-)+/g, "-");
      }
      if (name.indexOf(":-") > -1) {
        hash = hash.replace(/:-/g, "-");
      }
      link = [];
      link.push("[");
      link.push(name);
      link.push("](#");
      link.push(hash);
      link.push(")");
      return link.join("");
    };

    return Toc;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,
