
/*
  lib/map.coffee
 */

(function() {
  var log,
    slice = [].slice;

  log = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return console.log.apply(console, ['markdown-scroll, map:'].concat(args));
  };

  module.exports = {
    setMap: function(getVis) {
      var addNodeToMap, bot, botRow, bufRow, firstNode, hgt, i, idx, idxMatch, j, k, l, len, len1, len2, line, match, matches, maxLen, node, nodeMatch, nodePtr, ref, ref1, ref2, ref3, ref4, ref5, ref6, start, target, text, timings, top, topRow, wlkr;
      if (getVis == null) {
        getVis = true;
      }
      start = Date.now();
      timings = {};
      if (getVis) {
        this.getVisTopHgtBot();
        timings['getVisTopHgtBot'] = Date.now() - start;
        start = Date.now();
      }
      this.nodes = [];
      wlkr = document.createTreeWalker(this.previewEle, NodeFilter.SHOW_TEXT, null, true);
      while ((node = wlkr.nextNode())) {
        text = node.textContent;
        if (!/\w+/.test(text)) {
          continue;
        }
        ref = this.getEleTopHgtBot(node.parentNode, false), top = ref[0], hgt = ref[1], bot = ref[2];
        this.nodes.push([top, bot, null, null, text, null]);
      }
      timings['tree walk'] = Date.now() - start;
      start = Date.now();
      nodePtr = 0;
      for (bufRow = i = 0, ref1 = this.editor.getLastBufferRow(); 0 <= ref1 ? i <= ref1 : i >= ref1; bufRow = 0 <= ref1 ? ++i : --i) {
        line = this.editor.lineTextForBufferRow(bufRow);
        if (!(matches = line.match(/[a-z0-9-\s]+/ig))) {
          continue;
        }
        maxLen = 0;
        target = null;
        for (j = 0, len = matches.length; j < len; j++) {
          match = matches[j];
          if (!(/\w+/.test(match))) {
            continue;
          }
          match = match.replace(/^\s+|\s+$/g, '');
          if (match.length > maxLen) {
            maxLen = match.length;
            target = match;
          }
        }
        if (target) {
          nodeMatch = null;
          ref2 = this.nodes.slice(nodePtr);
          for (idx = k = 0, len1 = ref2.length; k < len1; idx = ++k) {
            node = ref2[idx];
            if (node[4].includes(target)) {
              if (nodeMatch) {
                nodeMatch = 'dup';
                break;
              }
              nodeMatch = node;
              idxMatch = idx;
            }
          }
          if (!nodeMatch || nodeMatch === 'dup') {
            continue;
          }
          ref3 = this.editor.screenRangeForBufferRange([[bufRow, 0], [bufRow, 9e9]]), (ref4 = ref3.start, topRow = ref4.row), (ref5 = ref3.end, botRow = ref5.row);
          nodeMatch[2] = topRow;
          nodeMatch[3] = botRow;
          nodeMatch[5] = target;
          nodePtr = idxMatch;
        }
      }
      timings['node match'] = Date.now() - start;
      start = Date.now();
      this.map = [[0, 0, 0, 0]];
      this.lastTopPix = this.lastBotPix = this.lastTopRow = this.lastBotRow = 0;
      firstNode = true;
      addNodeToMap = (function(_this) {
        return function(node) {
          var botPix, topPix;
          topPix = node[0], botPix = node[1], topRow = node[2], botRow = node[3];
          if (topPix < _this.lastBotPix || topRow <= _this.lastBotRow) {
            _this.lastTopPix = Math.min(topPix, _this.lastTopPix);
            _this.lastBotPix = Math.max(botPix, _this.lastBotPix);
            _this.lastTopRow = Math.min(topRow, _this.lastTopRow);
            _this.lastBotRow = Math.max(botRow, _this.lastBotRow);
            _this.map[_this.map.length - 1] = [_this.lastTopPix, _this.lastBotPix, _this.lastTopRow, _this.lastBotRow];
          } else {
            if (firstNode) {
              _this.map[0][1] = topPix;
              _this.map[0][3] = Math.max(0, topRow - 1);
            }
            _this.map.push([_this.lastTopPix = topPix, _this.lastBotPix = botPix, _this.lastTopRow = topRow, _this.lastBotRow = botRow]);
          }
          return firstNode = false;
        };
      })(this);
      ref6 = this.nodes;
      for (l = 0, len2 = ref6.length; l < len2; l++) {
        node = ref6[l];
        if (node[2] !== null) {
          addNodeToMap(node);
        }
      }
      botRow = this.editor.getLastScreenRow();
      topRow = Math.min(botRow, this.lastBotRow + 1);
      addNodeToMap([this.lastBotPix, this.previewEle.scrollHeight, topRow, botRow]);
      return this.nodes = null;
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
