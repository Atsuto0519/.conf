
/*
  lib/scroll.coffee
 */

(function() {
  var log,
    slice = [].slice;

  log = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    console.log.apply(console, ['markdown-scroll, scroll:'].concat(args));
    return args[0];
  };

  module.exports = {
    chkScroll: function(eventType, auto) {
      var cursorOfs, scrollFrac;
      if (this.scrollTimeout) {
        clearTimeout(this.scrollTimeout);
        this.scrollTimeout = null;
      }
      if (!this.editor.alive) {
        this.stopTracking();
        return;
      }
      if (eventType !== 'changed') {
        this.getVisTopHgtBot();
        if (this.scrnTopOfs !== this.lastScrnTopOfs || this.scrnBotOfs !== this.lastScrnBotOfs || this.previewTopOfs !== this.lastPvwTopOfs || this.previewBotOfs !== this.lastPvwBotOfs) {
          this.lastScrnTopOfs = this.scrnTopOfs;
          this.lastScrnBotOfs = this.scrnBotOfs;
          this.lastPvwTopOfs = this.previewTopOfs;
          this.lastPvwBotOfs = this.previewBotOfs;
          this.setMap(false);
        }
      }
      switch (eventType) {
        case 'init':
          cursorOfs = this.editor.getCursorScreenPosition().row * this.chrHgt;
          if ((this.scrnTopOfs <= cursorOfs && cursorOfs <= this.scrnBotOfs)) {
            return this.setScroll(cursorOfs);
          } else {
            return this.setScroll(this.scrnTopOfs);
          }
          break;
        case 'changed':
        case 'cursorMoved':
          this.setScroll(this.editor.getCursorScreenPosition().row * this.chrHgt);
          return this.ignoreScrnScrollUntil = Date.now() + 500;
        case 'newtop':
          if (this.ignoreScrnScrollUntil && Date.now() < this.ignoreScrnScrollUntil) {
            break;
          }
          this.ignoreScrnScrollUntil = null;
          scrollFrac = this.scrnTopOfs / (this.scrnScrollHgt - this.scrnHeight);
          this.setScroll(this.scrnTopOfs + (this.scrnHeight * scrollFrac));
          if (!auto) {
            return this.scrollTimeout = setTimeout(((function(_this) {
              return function() {
                return _this.chkScroll('newtop', true);
              };
            })(this)), 300);
          }
      }
    },
    setScroll: function(scrnPosPix) {
      var botPix, botRow, i, idx, lastBotPix, lastBotRow, lastMapping, len, mapping, pix1, pix2, pvwPosPix, ref, row1, row2, spanFrac, topPix, topRow, visOfs;
      scrnPosPix = Math.max(0, scrnPosPix);
      lastMapping = null;
      ref = this.map;
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        mapping = ref[idx];
        topPix = mapping[0], botPix = mapping[1], topRow = mapping[2], botRow = mapping[3];
        if (((topRow * this.chrHgt) <= scrnPosPix && scrnPosPix < ((botRow + 1) * this.chrHgt)) || idx === this.map.length - 1) {
          row1 = topRow;
          row2 = botRow + 1;
          pix1 = topPix;
          pix2 = botPix;
          break;
        } else {
          if (lastMapping == null) {
            lastMapping = mapping;
          }
          lastBotPix = lastMapping[1];
          lastBotRow = lastMapping[3] + 1;
          if (((lastBotRow * this.chrHgt) <= scrnPosPix && scrnPosPix < (topRow * this.chrHgt))) {
            row1 = lastBotRow;
            row2 = topRow;
            pix1 = lastBotPix;
            pix2 = topPix;
            break;
          }
        }
        lastMapping = mapping;
      }
      spanFrac = (scrnPosPix - (row1 * this.chrHgt)) / ((row2 - row1) * this.chrHgt);
      visOfs = scrnPosPix - this.scrnTopOfs;
      pvwPosPix = pix1 + ((pix2 - pix1) * spanFrac);
      return this.previewEle.scrollTop = pvwPosPix - visOfs;
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
