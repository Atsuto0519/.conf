"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _atom = require("atom");

var _mteKernel = require("@susisu/mte-kernel");

class TextEditorInterface extends _mteKernel.ITextEditor {
  constructor(textEditor, scopes) {
    super();
    this.textEditor = textEditor;
    this.textBuffer = textEditor.getBuffer();
    this.scopes = scopes;
    this.transaction = false;
    this.emitter = new _atom.Emitter();
  }

  getCursorPosition() {
    const _pos = this.textEditor.getCursorBufferPosition();
    return new _mteKernel.Point(_pos.row, _pos.column);
  }

  setCursorPosition(pos) {
    this.textEditor.setCursorBufferPosition([pos.row, pos.column]);
  }

  setSelectionRange(range) {
    this.textEditor.setSelectedBufferRange([[range.start.row, range.start.column], [range.end.row, range.end.column]]);
  }

  getLastRow() {
    return this.textBuffer.getLastRow();
  }

  acceptsTableEdit(row) {
    const sd = this.textEditor.scopeDescriptorForBufferPosition([row, 0]).getScopesArray();
    for (const scope of this.scopes) {
      if (sd.indexOf(scope) >= 0) {
        return true;
      }
    }
    return false;
  }

  getLine(row) {
    return this.textBuffer.lineForRow(row);
  }

  insertLine(row, line) {
    const lastRow = this.textBuffer.getLastRow();
    if (row > lastRow) {
      const le = this.textBuffer.lineEndingForRow(lastRow);
      this.textBuffer.append("\n" + line + le, { normalizeLineEndings: true });
    } else {
      this.textBuffer.insert([row, 0], line + "\n", { normalizeLineEndings: true });
    }
  }

  deleteLine(row) {
    this.textBuffer.deleteRow(row);
  }

  replaceLines(startRow, endRow, lines) {
    const le = this.textBuffer.lineEndingForRow(endRow - 1);
    this.textBuffer.setTextInRange([[startRow, 0], [endRow, 0]], lines.join("\n") + le, { normalizeLineEndings: true });
  }

  transact(func) {
    this.transaction = true;
    this.textBuffer.transact(() => {
      func();
    });
    this.transaction = false;
    this.emitter.emit("did-finish-transaction");
  }

  onDidFinishTransaction(func) {
    return this.emitter.on("did-finish-transaction", func);
  }

  destroy() {
    this.emitter.dispose();
  }
}
exports.default = TextEditorInterface;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRleHQtZWRpdG9yLWludGVyZmFjZS5qcyJdLCJuYW1lcyI6WyJUZXh0RWRpdG9ySW50ZXJmYWNlIiwiSVRleHRFZGl0b3IiLCJjb25zdHJ1Y3RvciIsInRleHRFZGl0b3IiLCJzY29wZXMiLCJ0ZXh0QnVmZmVyIiwiZ2V0QnVmZmVyIiwidHJhbnNhY3Rpb24iLCJlbWl0dGVyIiwiRW1pdHRlciIsImdldEN1cnNvclBvc2l0aW9uIiwiX3BvcyIsImdldEN1cnNvckJ1ZmZlclBvc2l0aW9uIiwiUG9pbnQiLCJyb3ciLCJjb2x1bW4iLCJzZXRDdXJzb3JQb3NpdGlvbiIsInBvcyIsInNldEN1cnNvckJ1ZmZlclBvc2l0aW9uIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJyYW5nZSIsInNldFNlbGVjdGVkQnVmZmVyUmFuZ2UiLCJzdGFydCIsImVuZCIsImdldExhc3RSb3ciLCJhY2NlcHRzVGFibGVFZGl0Iiwic2QiLCJzY29wZURlc2NyaXB0b3JGb3JCdWZmZXJQb3NpdGlvbiIsImdldFNjb3Blc0FycmF5Iiwic2NvcGUiLCJpbmRleE9mIiwiZ2V0TGluZSIsImxpbmVGb3JSb3ciLCJpbnNlcnRMaW5lIiwibGluZSIsImxhc3RSb3ciLCJsZSIsImxpbmVFbmRpbmdGb3JSb3ciLCJhcHBlbmQiLCJub3JtYWxpemVMaW5lRW5kaW5ncyIsImluc2VydCIsImRlbGV0ZUxpbmUiLCJkZWxldGVSb3ciLCJyZXBsYWNlTGluZXMiLCJzdGFydFJvdyIsImVuZFJvdyIsImxpbmVzIiwic2V0VGV4dEluUmFuZ2UiLCJqb2luIiwidHJhbnNhY3QiLCJmdW5jIiwiZW1pdCIsIm9uRGlkRmluaXNoVHJhbnNhY3Rpb24iLCJvbiIsImRlc3Ryb3kiLCJkaXNwb3NlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFDQTs7QUFFZSxNQUFNQSxtQkFBTixTQUFrQ0Msc0JBQWxDLENBQThDO0FBQzNEQyxjQUFZQyxVQUFaLEVBQXdCQyxNQUF4QixFQUFnQztBQUM5QjtBQUNBLFNBQUtE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QUFLRDs7QUFFRFUsV0FBU0MsSUFBVCxFQUFlO0FBQ2IsU0FBSzNDLFdBQUwsR0FBbUIsSUFBbkI7QUFDQSxTQUFLRixVQUFMLENBQWdCNEMsUUFBaEIsQ0FBeUIsTUFBTTtBQUFFQztBQUFTLEtBQTFDO0FBQ0EsU0FBSzNDLFdBQUwsR0FBbUIsS0FBbkI7QUFDQSxTQUFLQyxPQUFMLENBQWEyQyxJQUFiLENBQWtCLHdCQUFsQjtBQUNEOztBQUVEQyx5QkFBdUJGLElBQXZCLEVBQTZCO0FBQzNCLFdBQU8sS0FBSzFDLE9BQUwsQ0FBYTZDLEVBQWIsQ0FBZ0Isd0JBQWhCLEVBQTBDSCxJQUExQyxDQUFQO0FBQ0Q7O0FBRURJLFlBQVU7QUFDUixTQUFLOUMsT0FBTCxDQUFhK0MsT0FBYjtBQUNEO0FBakYwRDtrQkFBeEN2RCxtQiIsImZpbGUiOiJ0ZXh0LWVkaXRvci1pbnRlcmZhY2UuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2hvdG1hbi8uYXRvbS9wYWNrYWdlcy9tYXJrZG93bi10YWJsZS1lZGl0b3IvbGliIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gXCJhdG9tXCI7XG5pbXBvcnQgeyBQb2ludCwgSVRleHRFZGl0b3IgfSBmcm9tIFwiQHN1c2lzdS9tdGUta2VybmVsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRleHRFZGl0b3JJbnRlcmZhY2UgZXh0ZW5kcyBJVGV4dEVkaXRvciB7XG4gIGNvbnN0cnVjdG9yKHRleHRFZGl0b3IsIHNjb3Blcykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy50ZXh0RWRpdG9yICA9IHRleHRFZGl0b3I7XG4gICAgdGhpcy50ZXh0QnVmZmVyICA9IHRleHRFZGl0b3IuZ2V0QnVmZmVyKCk7XG4gICAgdGhpcy5zY29wZXMgICAgICA9IHNjb3BlcztcbiAgICB0aGlzLnRyYW5zYWN0aW9uID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0dGVyICAgICA9IG5ldyBFbWl0dGVyKCk7XG4gIH1cblxuICBnZXRDdXJzb3JQb3NpdGlvbigpIHtcbiAgICBjb25zdCBfcG9zID0gdGhpcy50ZXh0RWRpdG9yLmdldEN1cnNvckJ1ZmZlclBvc2l0aW9uKCk7XG4gICAgcmV0dXJuIG5ldyBQb2ludChfcG9zLnJvdywgX3Bvcy5jb2x1bW4pO1xuICB9XG5cbiAgc2V0Q3Vyc29yUG9zaXRpb24ocG9zKSB7XG4gICAgdGhpcy50ZXh0RWRpdG9yLnNldEN1cnNvckJ1ZmZlclBvc2l0aW9uKFtwb3Mucm93LCBwb3MuY29sdW1uXSk7XG4gIH1cblxuICBzZXRTZWxlY3Rpb25SYW5nZShyYW5nZSkge1xuICAgIHRoaXMudGV4dEVkaXRvci5zZXRTZWxlY3RlZEJ1ZmZlclJhbmdlKFtcbiAgICAgIFtyYW5nZS5zdGFydC5yb3csIHJhbmdlLnN0YXJ0LmNvbHVtbl0sXG4gICAgICBbcmFuZ2UuZW5kLnJvdywgcmFuZ2UuZW5kLmNvbHVtbl1cbiAgICBdKTtcbiAgfVxuXG4gIGdldExhc3RSb3coKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dEJ1ZmZlci5nZXRMYXN0Um93KCk7XG4gIH1cblxuICBhY2NlcHRzVGFibGVFZGl0KHJvdykge1xuICAgIGNvbnN0IHNkID0gdGhpcy50ZXh0RWRpdG9yLnNjb3BlRGVzY3JpcHRvckZvckJ1ZmZlclBvc2l0aW9uKFtyb3csIDBdKS5nZXRTY29wZXNBcnJheSgpO1xuICAgIGZvciAoY29uc3Qgc2NvcGUgb2YgdGhpcy5zY29wZXMpIHtcbiAgICAgIGlmIChzZC5pbmRleE9mKHNjb3BlKSA+PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBnZXRMaW5lKHJvdykge1xuICAgIHJldHVybiB0aGlzLnRleHRCdWZmZXIubGluZUZvclJvdyhyb3cpO1xuICB9XG5cbiAgaW5zZXJ0TGluZShyb3csIGxpbmUpIHtcbiAgICBjb25zdCBsYXN0Um93ID0gdGhpcy50ZXh0QnVmZmVyLmdldExhc3RSb3coKTtcbiAgICBpZiAocm93ID4gbGFzdFJvdykge1xuICAgICAgY29uc3QgbGUgPSB0aGlzLnRleHRCdWZmZXIubGluZUVuZGluZ0ZvclJvdyhsYXN0Um93KTtcbiAgICAgIHRoaXMudGV4dEJ1ZmZlci5hcHBlbmQoXCJcXG5cIiArIGxpbmUgKyBsZSwgeyBub3JtYWxpemVMaW5lRW5kaW5nczogdHJ1ZSB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnRleHRCdWZmZXIuaW5zZXJ0KFtyb3csIDBdLCBsaW5lICsgXCJcXG5cIiwgeyBub3JtYWxpemVMaW5lRW5kaW5nczogdHJ1ZSB9KTtcbiAgICB9XG4gIH1cblxuICBkZWxldGVMaW5lKHJvdykge1xuICAgIHRoaXMudGV4dEJ1ZmZlci5kZWxldGVSb3cocm93KTtcbiAgfVxuXG4gIHJlcGxhY2VMaW5lcyhzdGFydFJvdywgZW5kUm93LCBsaW5lcykge1xuICAgIGNvbnN0IGxlID0gdGhpcy50ZXh0QnVmZmVyLmxpbmVFbmRpbmdGb3JSb3coZW5kUm93IC0gMSk7XG4gICAgdGhpcy50ZXh0QnVmZmVyLnNldFRleHRJblJhbmdlKFxuICAgICAgW1tzdGFydFJvdywgMF0sIFtlbmRSb3csIDBdXSxcbiAgICAgIGxpbmVzLmpvaW4oXCJcXG5cIikgKyBsZSxcbiAgICAgIHsgbm9ybWFsaXplTGluZUVuZGluZ3M6IHRydWUgfVxuICAgICk7XG4gIH1cblxuICB0cmFuc2FjdChmdW5jKSB7XG4gICAgdGhpcy50cmFuc2FjdGlvbiA9IHRydWU7XG4gICAgdGhpcy50ZXh0QnVmZmVyLnRyYW5zYWN0KCgpID0+IHsgZnVuYygpOyB9KTtcbiAgICB0aGlzLnRyYW5zYWN0aW9uID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0dGVyLmVtaXQoXCJkaWQtZmluaXNoLXRyYW5zYWN0aW9uXCIpO1xuICB9XG5cbiAgb25EaWRGaW5pc2hUcmFuc2FjdGlvbihmdW5jKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlci5vbihcImRpZC1maW5pc2gtdHJhbnNhY3Rpb25cIiwgZnVuYyk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZW1pdHRlci5kaXNwb3NlKCk7XG4gIH1cbn1cbiJdfQ==